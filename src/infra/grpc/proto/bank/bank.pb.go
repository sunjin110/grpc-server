// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.4
// source: bank/bank.proto

package bank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	comm "grpc-server/src/infra/grpc/proto/comm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 口座の作成/削除
type BankAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *BankAccountRequest) Reset() {
	*x = BankAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccountRequest) ProtoMessage() {}

func (x *BankAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccountRequest.ProtoReflect.Descriptor instead.
func (*BankAccountRequest) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{0}
}

func (x *BankAccountRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// 登録されている口座をみる
type ListBankAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankAccountInfoList []*BankAccountInfo `protobuf:"bytes,1,rep,name=bank_account_info_list,json=bankAccountInfoList,proto3" json:"bank_account_info_list,omitempty"`
}

func (x *ListBankAccountReply) Reset() {
	*x = ListBankAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBankAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBankAccountReply) ProtoMessage() {}

func (x *ListBankAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBankAccountReply.ProtoReflect.Descriptor instead.
func (*ListBankAccountReply) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{1}
}

func (x *ListBankAccountReply) GetBankAccountInfoList() []*BankAccountInfo {
	if x != nil {
		return x.BankAccountInfoList
	}
	return nil
}

type BankAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Money int32  `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *BankAccountInfo) Reset() {
	*x = BankAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccountInfo) ProtoMessage() {}

func (x *BankAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccountInfo.ProtoReflect.Descriptor instead.
func (*BankAccountInfo) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{2}
}

func (x *BankAccountInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *BankAccountInfo) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

// 入金/出金
type UserMoneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Money int32  `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *UserMoneyRequest) Reset() {
	*x = UserMoneyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMoneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMoneyRequest) ProtoMessage() {}

func (x *UserMoneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMoneyRequest.ProtoReflect.Descriptor instead.
func (*UserMoneyRequest) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{3}
}

func (x *UserMoneyRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserMoneyRequest) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

// 送金
type TranferUserMoneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userfrom string `protobuf:"bytes,1,opt,name=userfrom,proto3" json:"userfrom,omitempty"`
	Userto   string `protobuf:"bytes,2,opt,name=userto,proto3" json:"userto,omitempty"`
	Money    int32  `protobuf:"varint,3,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *TranferUserMoneyRequest) Reset() {
	*x = TranferUserMoneyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranferUserMoneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranferUserMoneyRequest) ProtoMessage() {}

func (x *TranferUserMoneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranferUserMoneyRequest.ProtoReflect.Descriptor instead.
func (*TranferUserMoneyRequest) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{4}
}

func (x *TranferUserMoneyRequest) GetUserfrom() string {
	if x != nil {
		return x.Userfrom
	}
	return ""
}

func (x *TranferUserMoneyRequest) GetUserto() string {
	if x != nil {
		return x.Userto
	}
	return ""
}

func (x *TranferUserMoneyRequest) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

// 残高を確認
type LookUserMoneyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankAccountInfo *BankAccountInfo `protobuf:"bytes,2,opt,name=bank_account_info,json=bankAccountInfo,proto3" json:"bank_account_info,omitempty"` // repeated BankAccountInfo account_info = 2;
}

func (x *LookUserMoneyReply) Reset() {
	*x = LookUserMoneyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUserMoneyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUserMoneyReply) ProtoMessage() {}

func (x *LookUserMoneyReply) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUserMoneyReply.ProtoReflect.Descriptor instead.
func (*LookUserMoneyReply) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{5}
}

func (x *LookUserMoneyReply) GetBankAccountInfo() *BankAccountInfo {
	if x != nil {
		return x.BankAccountInfo
	}
	return nil
}

// 活動記録を確認
type ListUserCashFlowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCashFlowInfoList []*UserCashFlowInfo `protobuf:"bytes,1,rep,name=user_cash_flow_info_list,json=userCashFlowInfoList,proto3" json:"user_cash_flow_info_list,omitempty"`
}

func (x *ListUserCashFlowReply) Reset() {
	*x = ListUserCashFlowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCashFlowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCashFlowReply) ProtoMessage() {}

func (x *ListUserCashFlowReply) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCashFlowReply.ProtoReflect.Descriptor instead.
func (*ListUserCashFlowReply) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{6}
}

func (x *ListUserCashFlowReply) GetUserCashFlowInfoList() []*UserCashFlowInfo {
	if x != nil {
		return x.UserCashFlowInfoList
	}
	return nil
}

type UserCashFlowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Money  int32  `protobuf:"varint,3,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *UserCashFlowInfo) Reset() {
	*x = UserCashFlowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bank_bank_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCashFlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCashFlowInfo) ProtoMessage() {}

func (x *UserCashFlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bank_bank_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCashFlowInfo.ProtoReflect.Descriptor instead.
func (*UserCashFlowInfo) Descriptor() ([]byte, []int) {
	return file_bank_bank_proto_rawDescGZIP(), []int{7}
}

func (x *UserCashFlowInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserCashFlowInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UserCashFlowInfo) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

var File_bank_bank_proto protoreflect.FileDescriptor

var file_bank_bank_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x12, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x62, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x16, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0x63, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x11,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x67, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x32, 0xfa,
	0x03, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x3c, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x44,
	0x65, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x18, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x61, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bank_bank_proto_rawDescOnce sync.Once
	file_bank_bank_proto_rawDescData = file_bank_bank_proto_rawDesc
)

func file_bank_bank_proto_rawDescGZIP() []byte {
	file_bank_bank_proto_rawDescOnce.Do(func() {
		file_bank_bank_proto_rawDescData = protoimpl.X.CompressGZIP(file_bank_bank_proto_rawDescData)
	})
	return file_bank_bank_proto_rawDescData
}

var file_bank_bank_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bank_bank_proto_goTypes = []interface{}{
	(*BankAccountRequest)(nil),      // 0: bank.BankAccountRequest
	(*ListBankAccountReply)(nil),    // 1: bank.ListBankAccountReply
	(*BankAccountInfo)(nil),         // 2: bank.BankAccountInfo
	(*UserMoneyRequest)(nil),        // 3: bank.UserMoneyRequest
	(*TranferUserMoneyRequest)(nil), // 4: bank.TranferUserMoneyRequest
	(*LookUserMoneyReply)(nil),      // 5: bank.LookUserMoneyReply
	(*ListUserCashFlowReply)(nil),   // 6: bank.ListUserCashFlowReply
	(*UserCashFlowInfo)(nil),        // 7: bank.UserCashFlowInfo
	(*comm.Empty)(nil),              // 8: comm.Empty
}
var file_bank_bank_proto_depIdxs = []int32{
	2,  // 0: bank.ListBankAccountReply.bank_account_info_list:type_name -> bank.BankAccountInfo
	2,  // 1: bank.LookUserMoneyReply.bank_account_info:type_name -> bank.BankAccountInfo
	7,  // 2: bank.ListUserCashFlowReply.user_cash_flow_info_list:type_name -> bank.UserCashFlowInfo
	0,  // 3: bank.BankRpc.CreateBankAccount:input_type -> bank.BankAccountRequest
	0,  // 4: bank.BankRpc.DeleteBankAccount:input_type -> bank.BankAccountRequest
	8,  // 5: bank.BankRpc.ListBankAccount:input_type -> comm.Empty
	3,  // 6: bank.BankRpc.IncUserMoney:input_type -> bank.UserMoneyRequest
	3,  // 7: bank.BankRpc.DecUserMoney:input_type -> bank.UserMoneyRequest
	4,  // 8: bank.BankRpc.TranferUserMoney:input_type -> bank.TranferUserMoneyRequest
	0,  // 9: bank.BankRpc.LookUserMoney:input_type -> bank.BankAccountRequest
	8,  // 10: bank.BankRpc.ListUserCashFlow:input_type -> comm.Empty
	8,  // 11: bank.BankRpc.CreateBankAccount:output_type -> comm.Empty
	8,  // 12: bank.BankRpc.DeleteBankAccount:output_type -> comm.Empty
	1,  // 13: bank.BankRpc.ListBankAccount:output_type -> bank.ListBankAccountReply
	8,  // 14: bank.BankRpc.IncUserMoney:output_type -> comm.Empty
	8,  // 15: bank.BankRpc.DecUserMoney:output_type -> comm.Empty
	8,  // 16: bank.BankRpc.TranferUserMoney:output_type -> comm.Empty
	5,  // 17: bank.BankRpc.LookUserMoney:output_type -> bank.LookUserMoneyReply
	6,  // 18: bank.BankRpc.ListUserCashFlow:output_type -> bank.ListUserCashFlowReply
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_bank_bank_proto_init() }
func file_bank_bank_proto_init() {
	if File_bank_bank_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bank_bank_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBankAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMoneyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranferUserMoneyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUserMoneyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCashFlowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bank_bank_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCashFlowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bank_bank_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bank_bank_proto_goTypes,
		DependencyIndexes: file_bank_bank_proto_depIdxs,
		MessageInfos:      file_bank_bank_proto_msgTypes,
	}.Build()
	File_bank_bank_proto = out.File
	file_bank_bank_proto_rawDesc = nil
	file_bank_bank_proto_goTypes = nil
	file_bank_bank_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BankRpcClient is the client API for BankRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BankRpcClient interface {
	CreateBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*comm.Empty, error)
	DeleteBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*comm.Empty, error)
	ListBankAccount(ctx context.Context, in *comm.Empty, opts ...grpc.CallOption) (*ListBankAccountReply, error)
	IncUserMoney(ctx context.Context, in *UserMoneyRequest, opts ...grpc.CallOption) (*comm.Empty, error)
	DecUserMoney(ctx context.Context, in *UserMoneyRequest, opts ...grpc.CallOption) (*comm.Empty, error)
	TranferUserMoney(ctx context.Context, in *TranferUserMoneyRequest, opts ...grpc.CallOption) (*comm.Empty, error)
	LookUserMoney(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*LookUserMoneyReply, error)
	ListUserCashFlow(ctx context.Context, in *comm.Empty, opts ...grpc.CallOption) (*ListUserCashFlowReply, error)
}

type bankRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBankRpcClient(cc grpc.ClientConnInterface) BankRpcClient {
	return &bankRpcClient{cc}
}

func (c *bankRpcClient) CreateBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*comm.Empty, error) {
	out := new(comm.Empty)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/CreateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) DeleteBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*comm.Empty, error) {
	out := new(comm.Empty)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/DeleteBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) ListBankAccount(ctx context.Context, in *comm.Empty, opts ...grpc.CallOption) (*ListBankAccountReply, error) {
	out := new(ListBankAccountReply)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/ListBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) IncUserMoney(ctx context.Context, in *UserMoneyRequest, opts ...grpc.CallOption) (*comm.Empty, error) {
	out := new(comm.Empty)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/IncUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) DecUserMoney(ctx context.Context, in *UserMoneyRequest, opts ...grpc.CallOption) (*comm.Empty, error) {
	out := new(comm.Empty)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/DecUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) TranferUserMoney(ctx context.Context, in *TranferUserMoneyRequest, opts ...grpc.CallOption) (*comm.Empty, error) {
	out := new(comm.Empty)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/TranferUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) LookUserMoney(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*LookUserMoneyReply, error) {
	out := new(LookUserMoneyReply)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/LookUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankRpcClient) ListUserCashFlow(ctx context.Context, in *comm.Empty, opts ...grpc.CallOption) (*ListUserCashFlowReply, error) {
	out := new(ListUserCashFlowReply)
	err := c.cc.Invoke(ctx, "/bank.BankRpc/ListUserCashFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankRpcServer is the server API for BankRpc service.
type BankRpcServer interface {
	CreateBankAccount(context.Context, *BankAccountRequest) (*comm.Empty, error)
	DeleteBankAccount(context.Context, *BankAccountRequest) (*comm.Empty, error)
	ListBankAccount(context.Context, *comm.Empty) (*ListBankAccountReply, error)
	IncUserMoney(context.Context, *UserMoneyRequest) (*comm.Empty, error)
	DecUserMoney(context.Context, *UserMoneyRequest) (*comm.Empty, error)
	TranferUserMoney(context.Context, *TranferUserMoneyRequest) (*comm.Empty, error)
	LookUserMoney(context.Context, *BankAccountRequest) (*LookUserMoneyReply, error)
	ListUserCashFlow(context.Context, *comm.Empty) (*ListUserCashFlowReply, error)
}

// UnimplementedBankRpcServer can be embedded to have forward compatible implementations.
type UnimplementedBankRpcServer struct {
}

func (*UnimplementedBankRpcServer) CreateBankAccount(context.Context, *BankAccountRequest) (*comm.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (*UnimplementedBankRpcServer) DeleteBankAccount(context.Context, *BankAccountRequest) (*comm.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankAccount not implemented")
}
func (*UnimplementedBankRpcServer) ListBankAccount(context.Context, *comm.Empty) (*ListBankAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBankAccount not implemented")
}
func (*UnimplementedBankRpcServer) IncUserMoney(context.Context, *UserMoneyRequest) (*comm.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncUserMoney not implemented")
}
func (*UnimplementedBankRpcServer) DecUserMoney(context.Context, *UserMoneyRequest) (*comm.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecUserMoney not implemented")
}
func (*UnimplementedBankRpcServer) TranferUserMoney(context.Context, *TranferUserMoneyRequest) (*comm.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranferUserMoney not implemented")
}
func (*UnimplementedBankRpcServer) LookUserMoney(context.Context, *BankAccountRequest) (*LookUserMoneyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUserMoney not implemented")
}
func (*UnimplementedBankRpcServer) ListUserCashFlow(context.Context, *comm.Empty) (*ListUserCashFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCashFlow not implemented")
}

func RegisterBankRpcServer(s *grpc.Server, srv BankRpcServer) {
	s.RegisterService(&_BankRpc_serviceDesc, srv)
}

func _BankRpc_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/CreateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).CreateBankAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_DeleteBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).DeleteBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/DeleteBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).DeleteBankAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_ListBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).ListBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/ListBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).ListBankAccount(ctx, req.(*comm.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_IncUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).IncUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/IncUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).IncUserMoney(ctx, req.(*UserMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_DecUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).DecUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/DecUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).DecUserMoney(ctx, req.(*UserMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_TranferUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranferUserMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).TranferUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/TranferUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).TranferUserMoney(ctx, req.(*TranferUserMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_LookUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).LookUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/LookUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).LookUserMoney(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankRpc_ListUserCashFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankRpcServer).ListUserCashFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.BankRpc/ListUserCashFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankRpcServer).ListUserCashFlow(ctx, req.(*comm.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BankRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bank.BankRpc",
	HandlerType: (*BankRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankAccount",
			Handler:    _BankRpc_CreateBankAccount_Handler,
		},
		{
			MethodName: "DeleteBankAccount",
			Handler:    _BankRpc_DeleteBankAccount_Handler,
		},
		{
			MethodName: "ListBankAccount",
			Handler:    _BankRpc_ListBankAccount_Handler,
		},
		{
			MethodName: "IncUserMoney",
			Handler:    _BankRpc_IncUserMoney_Handler,
		},
		{
			MethodName: "DecUserMoney",
			Handler:    _BankRpc_DecUserMoney_Handler,
		},
		{
			MethodName: "TranferUserMoney",
			Handler:    _BankRpc_TranferUserMoney_Handler,
		},
		{
			MethodName: "LookUserMoney",
			Handler:    _BankRpc_LookUserMoney_Handler,
		},
		{
			MethodName: "ListUserCashFlow",
			Handler:    _BankRpc_ListUserCashFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank/bank.proto",
}
